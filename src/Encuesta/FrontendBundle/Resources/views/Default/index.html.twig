{% extends '::base-frontend.html.twig' %}
{% block body %}



<div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
  FB.init({
    appId      : '1393595740906458',
    status     : true, // check login status
    cookie     : true, // enable cookies to allow the server to access the session
    xfbml      : true  // parse XFBML
  });

  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
  // for any authentication related change, such as login, logout or session refresh. This means that
  // whenever someone who was previously logged out tries to log in again, the correct case below 
  // will be handled. 
  FB.Event.subscribe('auth.authResponseChange', function(response) {
    // Here we specify what we do with the response anytime this event occurs. 
    if (response.status === 'connected') {
      // The response object is returned with a status field that lets the app know the current
      // login status of the person. In this case, we're handling the situation where they 
      // have logged in to the app.
     
    FB.api('/me', function(response) {
      console.log(response);
    });
      testAPI();
    } else if (response.status === 'not_authorized') {
      // In this case, the person is logged into Facebook, but not into the app, so we call
      // FB.login() to prompt them to do so. 
      // In real-life usage, you wouldn't want to immediately prompt someone to login 
      // like this, for two reasons:
      // (1) JavaScript created popup windows are blocked by most browsers unless they 
      // result from direct interaction from people using the app (such as a mouse click)
      // (2) it is a bad experience to be continually prompted to login upon page load.
      FB.login();
    } else {
      // In this case, the person is not logged into Facebook, so we call the login() 
      // function to prompt them to do so. Note that at this stage there is no indication
      // of whether they are logged into the app. If they aren't then they'll see the Login
      // dialog right after they log in to Facebook. 
      // The same caveats as above apply to the FB.login() call here.
      FB.login();
    }
  });
  };

  // Load the SDK asynchronously
  (function(d){
   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
   if (d.getElementById(id)) {return;}
   js = d.createElement('script'); js.id = id; js.async = true;
   js.src = "//connect.facebook.net/en_US/all.js";
   ref.parentNode.insertBefore(js, ref);
  }(document));

  // Here we run a very simple test of the Graph API after login is successful. 
  // This testAPI() function is only called in those cases. 
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Good to see you, ' + response.name + '.');
    });
  }
</script>

<!--
  Below we include the Login Button social plugin. This button uses the JavaScript SDK to
  present a graphical Login button that triggers the FB.login() function when clicked. -->

<fb:login-button show-faces="true" width="200" max-rows="1"></fb:login-button>




<br />

{% if app.user %}
    {{ app.user.username }} , {{ app.user.usuarioRolesString}}   
    <ul>
        <li><a href="{{ path('frontend_votaciones') }}">Votaciones</a></li>
        <li><a href="{{ path('frontend_perfil') }}">Mi Cuenta</a></li>
        <li><a href="{{ path('frontend_logout') }}">Salir</a></li>
     
    </ul>    
{% else %}
    <a href="{{ path('frontend_login') }}" >Login</a>
    <a href="{{ path('frontend_registro') }}" >Registro</a>
    {#<p>{{ facebook_login_button({'autologoutlink': true}) }}</p>#}
{% endif %}
    
 <br />
 <br />
 
 <h3>Categor√≠as</h3>
 <br />
  <ul>
{% for categoria in categorias %}
    <li>{{ categoria.nombre }}</li>
{% endfor %} 
 </ul>
<br />
 <br />
 
 <h3>Eventos Mas Votados</h3>
 
 <br />
 <br />
 
 <ul>
 {% for evento in votados %}
         <li>
            <table width="1000" >
                <tr>
                    <td width="20%"><img src="{{ evento.imagenEvento }}" /></td>
                    <td width="20%">{{ evento.titulo }}</td>
                    <td width="20%" align="center">{{ evento.creador.nombre }}</td>
                    <td width="20%">{{ evento.createdAt | date('d/m/Y H:i') }}</td>  
                    <td><a href="{{ path('frontend_evento', {'id':evento.id}) }}">Ver/Votar</a></td>
                </tr>
            </table>        
        </li>
 {% endfor %}
 </ul>
 {% endblock %}